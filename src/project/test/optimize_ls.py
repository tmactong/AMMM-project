import typing
from src.project.helpers.data_parser import parse as data_parser

formed_loops =  [[5, 2, 1], [5, 3, 1], [5, 4, 1], [5, 6, 1], [5, 7, 1], [5, 8, 1], [5, 9, 1], [5, 10, 1], [5, 2, 6, 1], [5, 2, 8, 1], [5, 2, 10, 1], [5, 3, 2, 1], [5, 3, 6, 1], [5, 3, 7, 1], [5, 3, 8, 1], [5, 3, 9, 1], [5, 3, 10, 1], [5, 4, 2, 1], [5, 4, 3, 1], [5, 4, 6, 1], [5, 4, 7, 1], [5, 4, 8, 1], [5, 4, 9, 1], [5, 4, 10, 1], [5, 7, 2, 1], [5, 7, 6, 1], [5, 7, 8, 1], [5, 7, 9, 1], [5, 7, 10, 1], [5, 8, 6, 1], [5, 8, 10, 1], [5, 9, 2, 1], [5, 9, 6, 1], [5, 9, 8, 1], [5, 9, 10, 1], [5, 10, 6, 1], [5, 2, 8, 6, 1], [5, 2, 8, 10, 1], [5, 2, 10, 6, 1], [5, 3, 2, 6, 1], [5, 3, 2, 8, 1], [5, 3, 2, 10, 1], [5, 3, 7, 2, 1], [5, 3, 7, 6, 1], [5, 3, 7, 8, 1], [5, 3, 7, 9, 1], [5, 3, 7, 10, 1], [5, 3, 8, 6, 1], [5, 3, 8, 10, 1], [5, 3, 9, 2, 1], [5, 3, 9, 6, 1], [5, 3, 9, 8, 1], [5, 3, 9, 10, 1], [5, 3, 10, 6, 1], [5, 4, 2, 6, 1], [5, 4, 2, 8, 1], [5, 4, 2, 10, 1], [5, 4, 3, 2, 1], [5, 4, 3, 6, 1], [5, 4, 3, 7, 1], [5, 4, 3, 8, 1], [5, 4, 3, 9, 1], [5, 4, 3, 10, 1], [5, 4, 7, 2, 1], [5, 4, 7, 6, 1], [5, 4, 7, 8, 1], [5, 4, 7, 9, 1], [5, 4, 7, 10, 1], [5, 4, 8, 6, 1], [5, 4, 8, 10, 1], [5, 4, 9, 2, 1], [5, 4, 9, 6, 1], [5, 4, 9, 8, 1], [5, 4, 9, 10, 1], [5, 4, 10, 6, 1], [5, 7, 2, 6, 1], [5, 7, 2, 8, 1], [5, 7, 2, 10, 1], [5, 7, 8, 6, 1], [5, 7, 8, 10, 1], [5, 7, 9, 2, 1], [5, 7, 9, 6, 1], [5, 7, 9, 8, 1], [5, 7, 9, 10, 1], [5, 7, 10, 6, 1], [5, 8, 10, 6, 1], [5, 9, 2, 6, 1], [5, 9, 2, 8, 1], [5, 9, 2, 10, 1], [5, 9, 8, 6, 1], [5, 9, 8, 10, 1], [5, 9, 10, 6, 1], [5, 2, 8, 10, 6, 1], [5, 3, 2, 8, 6, 1], [5, 3, 2, 8, 10, 1], [5, 3, 2, 10, 6, 1], [5, 3, 7, 2, 6, 1], [5, 3, 7, 2, 8, 1], [5, 3, 7, 2, 10, 1], [5, 3, 7, 8, 6, 1], [5, 3, 7, 8, 10, 1], [5, 3, 7, 9, 2, 1], [5, 3, 7, 9, 6, 1], [5, 3, 7, 9, 8, 1], [5, 3, 7, 9, 10, 1], [5, 3, 7, 10, 6, 1], [5, 3, 8, 10, 6, 1], [5, 3, 9, 2, 6, 1], [5, 3, 9, 2, 8, 1], [5, 3, 9, 2, 10, 1], [5, 3, 9, 8, 6, 1], [5, 3, 9, 8, 10, 1], [5, 3, 9, 10, 6, 1], [5, 4, 2, 8, 6, 1], [5, 4, 2, 8, 10, 1], [5, 4, 2, 10, 6, 1], [5, 4, 3, 2, 6, 1], [5, 4, 3, 2, 8, 1], [5, 4, 3, 2, 10, 1], [5, 4, 3, 7, 2, 1], [5, 4, 3, 7, 6, 1], [5, 4, 3, 7, 8, 1], [5, 4, 3, 7, 9, 1], [5, 4, 3, 7, 10, 1], [5, 4, 3, 8, 6, 1], [5, 4, 3, 8, 10, 1], [5, 4, 3, 9, 2, 1], [5, 4, 3, 9, 6, 1], [5, 4, 3, 9, 8, 1], [5, 4, 3, 9, 10, 1], [5, 4, 3, 10, 6, 1], [5, 4, 7, 2, 6, 1], [5, 4, 7, 2, 8, 1], [5, 4, 7, 2, 10, 1], [5, 4, 7, 8, 6, 1], [5, 4, 7, 8, 10, 1], [5, 4, 7, 9, 2, 1], [5, 4, 7, 9, 6, 1], [5, 4, 7, 9, 8, 1], [5, 4, 7, 9, 10, 1], [5, 4, 7, 10, 6, 1], [5, 4, 8, 10, 6, 1], [5, 4, 9, 2, 6, 1], [5, 4, 9, 2, 8, 1], [5, 4, 9, 2, 10, 1], [5, 4, 9, 8, 6, 1], [5, 4, 9, 8, 10, 1], [5, 4, 9, 10, 6, 1], [5, 7, 2, 8, 6, 1], [5, 7, 2, 8, 10, 1], [5, 7, 2, 10, 6, 1], [5, 7, 8, 10, 6, 1], [5, 7, 9, 2, 6, 1], [5, 7, 9, 2, 8, 1], [5, 7, 9, 2, 10, 1], [5, 7, 9, 8, 6, 1], [5, 7, 9, 8, 10, 1], [5, 7, 9, 10, 6, 1], [5, 9, 2, 8, 6, 1], [5, 9, 2, 8, 10, 1], [5, 9, 2, 10, 6, 1], [5, 9, 8, 10, 6, 1], [5, 3, 2, 8, 10, 6, 1], [5, 3, 7, 2, 8, 6, 1], [5, 3, 7, 2, 8, 10, 1], [5, 3, 7, 2, 10, 6, 1], [5, 3, 7, 8, 10, 6, 1], [5, 3, 7, 9, 2, 6, 1], [5, 3, 7, 9, 2, 8, 1], [5, 3, 7, 9, 2, 10, 1], [5, 3, 7, 9, 8, 6, 1], [5, 3, 7, 9, 8, 10, 1], [5, 3, 7, 9, 10, 6, 1], [5, 3, 9, 2, 8, 6, 1], [5, 3, 9, 2, 8, 10, 1], [5, 3, 9, 2, 10, 6, 1], [5, 3, 9, 8, 10, 6, 1], [5, 4, 2, 8, 10, 6, 1], [5, 4, 3, 2, 8, 6, 1], [5, 4, 3, 2, 8, 10, 1], [5, 4, 3, 2, 10, 6, 1], [5, 4, 3, 7, 2, 6, 1], [5, 4, 3, 7, 2, 8, 1], [5, 4, 3, 7, 2, 10, 1], [5, 4, 3, 7, 8, 6, 1], [5, 4, 3, 7, 8, 10, 1], [5, 4, 3, 7, 9, 2, 1], [5, 4, 3, 7, 9, 6, 1], [5, 4, 3, 7, 9, 8, 1], [5, 4, 3, 7, 9, 10, 1], [5, 4, 3, 7, 10, 6, 1], [5, 4, 3, 8, 10, 6, 1], [5, 4, 3, 9, 2, 6, 1], [5, 4, 3, 9, 2, 8, 1], [5, 4, 3, 9, 2, 10, 1], [5, 4, 3, 9, 8, 6, 1], [5, 4, 3, 9, 8, 10, 1], [5, 4, 3, 9, 10, 6, 1], [5, 4, 7, 2, 8, 6, 1], [5, 4, 7, 2, 8, 10, 1], [5, 4, 7, 2, 10, 6, 1], [5, 4, 7, 8, 10, 6, 1], [5, 4, 7, 9, 2, 6, 1], [5, 4, 7, 9, 2, 8, 1], [5, 4, 7, 9, 2, 10, 1], [5, 4, 7, 9, 8, 6, 1], [5, 4, 7, 9, 8, 10, 1], [5, 4, 7, 9, 10, 6, 1], [5, 4, 9, 2, 8, 6, 1], [5, 4, 9, 2, 8, 10, 1], [5, 4, 9, 2, 10, 6, 1], [5, 4, 9, 8, 10, 6, 1], [5, 7, 2, 8, 10, 6, 1], [5, 7, 9, 2, 8, 6, 1], [5, 7, 9, 2, 8, 10, 1], [5, 7, 9, 2, 10, 6, 1], [5, 7, 9, 8, 10, 6, 1], [5, 9, 2, 8, 10, 6, 1], [5, 3, 7, 2, 8, 10, 6, 1], [5, 3, 7, 9, 2, 8, 6, 1], [5, 3, 7, 9, 2, 8, 10, 1], [5, 3, 7, 9, 2, 10, 6, 1], [5, 3, 7, 9, 8, 10, 6, 1], [5, 3, 9, 2, 8, 10, 6, 1], [5, 4, 3, 2, 8, 10, 6, 1], [5, 4, 3, 7, 2, 8, 6, 1], [5, 4, 3, 7, 2, 8, 10, 1], [5, 4, 3, 7, 2, 10, 6, 1], [5, 4, 3, 7, 8, 10, 6, 1], [5, 4, 3, 7, 9, 2, 6, 1], [5, 4, 3, 7, 9, 2, 8, 1], [5, 4, 3, 7, 9, 2, 10, 1], [5, 4, 3, 7, 9, 8, 6, 1], [5, 4, 3, 7, 9, 8, 10, 1], [5, 4, 3, 7, 9, 10, 6, 1], [5, 4, 3, 9, 2, 8, 6, 1], [5, 4, 3, 9, 2, 8, 10, 1], [5, 4, 3, 9, 2, 10, 6, 1], [5, 4, 3, 9, 8, 10, 6, 1], [5, 4, 7, 2, 8, 10, 6, 1], [5, 4, 7, 9, 2, 8, 6, 1], [5, 4, 7, 9, 2, 8, 10, 1], [5, 4, 7, 9, 2, 10, 6, 1], [5, 4, 7, 9, 8, 10, 6, 1], [5, 4, 9, 2, 8, 10, 6, 1], [5, 7, 9, 2, 8, 10, 6, 1], [5, 3, 7, 9, 2, 8, 10, 6, 1], [5, 4, 3, 7, 2, 8, 10, 6, 1], [5, 4, 3, 7, 9, 2, 8, 6, 1], [5, 4, 3, 7, 9, 2, 8, 10, 1], [5, 4, 3, 7, 9, 2, 10, 6, 1], [5, 4, 3, 7, 9, 8, 10, 6, 1], [5, 4, 3, 9, 2, 8, 10, 6, 1], [5, 4, 7, 9, 2, 8, 10, 6, 1], [5, 4, 3, 7, 9, 2, 8, 10, 6, 1]]
_candidate_groups = [[(5, 2), (2, 1)], [(5, 3), (3, 1)], [(5, 4), (4, 1)], [(5, 6), (6, 1)], [(5, 7), (7, 1)], [(5, 8), (8, 1)], [(5, 9)], [(5, 10), (10, 1)], [(5, 2), (2, 6), (6, 1)], [(5, 2), (2, 8), (8, 1)], [(5, 2), (2, 10), (10, 1)], [(5, 3), (3, 2), (2, 1)], [(5, 3), (3, 6), (6, 1)], [(5, 3), (3, 7), (7, 1)], [(5, 3), (3, 8), (8, 1)], [(5, 3), (3, 9)], [(5, 3), (3, 10), (10, 1)], [(5, 4), (4, 2), (2, 1)], [(5, 4), (3, 1)], [(5, 4), (4, 6), (6, 1)], [(5, 4), (4, 7), (7, 1)], [(5, 4), (4, 8), (8, 1)], [(5, 4), (4, 9)], [(5, 4), (4, 10), (10, 1)], [(5, 7), (7, 2), (2, 1)], [(5, 7), (7, 6), (6, 1)], [(5, 7), (7, 8), (8, 1)], [(5, 7), (7, 9)], [(5, 7), (7, 10), (10, 1)], [(5, 8), (8, 6), (6, 1)], [(5, 8), (8, 10), (10, 1)], [(5, 9), (9, 2), (2, 1)], [(5, 9), (6, 1)], [(5, 9), (9, 8), (8, 1)], [(5, 9), (9, 10), (10, 1)], [(5, 10), (10, 6), (6, 1)], [(5, 2), (2, 8), (8, 6), (6, 1)], [(5, 2), (2, 8), (8, 10), (10, 1)], [(5, 2), (2, 10), (10, 6), (6, 1)], [(5, 3), (3, 2), (2, 6), (6, 1)], [(5, 3), (3, 2), (2, 8), (8, 1)], [(5, 3), (3, 2), (2, 10), (10, 1)], [(5, 3), (3, 7), (7, 2), (2, 1)], [(5, 3), (3, 7), (7, 6), (6, 1)], [(5, 3), (3, 7), (7, 8), (8, 1)], [(5, 3), (3, 7), (7, 9)], [(5, 3), (3, 7), (7, 10), (10, 1)], [(5, 3), (3, 8), (8, 6), (6, 1)], [(5, 3), (3, 8), (8, 10), (10, 1)], [(5, 3), (3, 9), (9, 2), (2, 1)], [(5, 3), (3, 9), (6, 1)], [(5, 3), (3, 9), (9, 8), (8, 1)], [(5, 3), (3, 9), (9, 10), (10, 1)], [(5, 3), (3, 10), (10, 6), (6, 1)], [(5, 4), (4, 2), (2, 6), (6, 1)], [(5, 4), (4, 2), (2, 8), (8, 1)], [(5, 4), (4, 2), (2, 10), (10, 1)], [(5, 4), (3, 2), (2, 1)], [(5, 4), (3, 6), (6, 1)], [(5, 4), (3, 7), (7, 1)], [(5, 4), (3, 8), (8, 1)], [(5, 4), (3, 9)], [(5, 4), (3, 10), (10, 1)], [(5, 4), (4, 7), (7, 2), (2, 1)], [(5, 4), (4, 7), (7, 6), (6, 1)], [(5, 4), (4, 7), (7, 8), (8, 1)], [(5, 4), (4, 7), (7, 9)], [(5, 4), (4, 7), (7, 10), (10, 1)], [(5, 4), (4, 8), (8, 6), (6, 1)], [(5, 4), (4, 8), (8, 10), (10, 1)], [(5, 4), (4, 9), (9, 2), (2, 1)], [(5, 4), (4, 9), (6, 1)], [(5, 4), (4, 9), (9, 8), (8, 1)], [(5, 4), (4, 9), (9, 10), (10, 1)], [(5, 4), (4, 10), (10, 6), (6, 1)], [(5, 7), (7, 2), (2, 6), (6, 1)], [(5, 7), (7, 2), (2, 8), (8, 1)], [(5, 7), (7, 2), (2, 10), (10, 1)], [(5, 7), (7, 8), (8, 6), (6, 1)], [(5, 7), (7, 8), (8, 10), (10, 1)], [(5, 7), (7, 9), (9, 2), (2, 1)], [(5, 7), (7, 9), (6, 1)], [(5, 7), (7, 9), (9, 8), (8, 1)], [(5, 7), (7, 9), (9, 10), (10, 1)], [(5, 7), (7, 10), (10, 6), (6, 1)], [(5, 8), (8, 10), (10, 6), (6, 1)], [(5, 9), (9, 2), (2, 6), (6, 1)], [(5, 9), (9, 2), (2, 8), (8, 1)], [(5, 9), (9, 2), (2, 10), (10, 1)], [(5, 9), (9, 8), (8, 6), (6, 1)], [(5, 9), (9, 8), (8, 10), (10, 1)], [(5, 9), (9, 10), (10, 6), (6, 1)], [(5, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 2), (2, 8), (8, 6), (6, 1)], [(5, 3), (3, 2), (2, 8), (8, 10), (10, 1)], [(5, 3), (3, 2), (2, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 2), (2, 6), (6, 1)], [(5, 3), (3, 7), (7, 2), (2, 8), (8, 1)], [(5, 3), (3, 7), (7, 2), (2, 10), (10, 1)], [(5, 3), (3, 7), (7, 8), (8, 6), (6, 1)], [(5, 3), (3, 7), (7, 8), (8, 10), (10, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 1)], [(5, 3), (3, 7), (7, 9), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 8), (8, 1)], [(5, 3), (3, 7), (7, 9), (9, 10), (10, 1)], [(5, 3), (3, 7), (7, 10), (10, 6), (6, 1)], [(5, 3), (3, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 9), (9, 2), (2, 6), (6, 1)], [(5, 3), (3, 9), (9, 2), (2, 8), (8, 1)], [(5, 3), (3, 9), (9, 2), (2, 10), (10, 1)], [(5, 3), (3, 9), (9, 8), (8, 6), (6, 1)], [(5, 3), (3, 9), (9, 8), (8, 10), (10, 1)], [(5, 3), (3, 9), (9, 10), (10, 6), (6, 1)], [(5, 4), (4, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (4, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (4, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (3, 2), (2, 6), (6, 1)], [(5, 4), (3, 2), (2, 8), (8, 1)], [(5, 4), (3, 2), (2, 10), (10, 1)], [(5, 4), (3, 7), (7, 2), (2, 1)], [(5, 4), (3, 7), (7, 6), (6, 1)], [(5, 4), (3, 7), (7, 8), (8, 1)], [(5, 4), (3, 7), (7, 9)], [(5, 4), (3, 7), (7, 10), (10, 1)], [(5, 4), (3, 8), (8, 6), (6, 1)], [(5, 4), (3, 8), (8, 10), (10, 1)], [(5, 4), (3, 9), (9, 2), (2, 1)], [(5, 4), (3, 9), (6, 1)], [(5, 4), (3, 9), (9, 8), (8, 1)], [(5, 4), (3, 9), (9, 10), (10, 1)], [(5, 4), (3, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 2), (2, 6), (6, 1)], [(5, 4), (4, 7), (7, 2), (2, 8), (8, 1)], [(5, 4), (4, 7), (7, 2), (2, 10), (10, 1)], [(5, 4), (4, 7), (7, 8), (8, 6), (6, 1)], [(5, 4), (4, 7), (7, 8), (8, 10), (10, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 1)], [(5, 4), (4, 7), (7, 9), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 8), (8, 1)], [(5, 4), (4, 7), (7, 9), (9, 10), (10, 1)], [(5, 4), (4, 7), (7, 10), (10, 6), (6, 1)], [(5, 4), (4, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 9), (9, 2), (2, 6), (6, 1)], [(5, 4), (4, 9), (9, 2), (2, 8), (8, 1)], [(5, 4), (4, 9), (9, 2), (2, 10), (10, 1)], [(5, 4), (4, 9), (9, 8), (8, 6), (6, 1)], [(5, 4), (4, 9), (9, 8), (8, 10), (10, 1)], [(5, 4), (4, 9), (9, 10), (10, 6), (6, 1)], [(5, 7), (7, 2), (2, 8), (8, 6), (6, 1)], [(5, 7), (7, 2), (2, 8), (8, 10), (10, 1)], [(5, 7), (7, 2), (2, 10), (10, 6), (6, 1)], [(5, 7), (7, 8), (8, 10), (10, 6), (6, 1)], [(5, 7), (7, 9), (9, 2), (2, 6), (6, 1)], [(5, 7), (7, 9), (9, 2), (2, 8), (8, 1)], [(5, 7), (7, 9), (9, 2), (2, 10), (10, 1)], [(5, 7), (7, 9), (9, 8), (8, 6), (6, 1)], [(5, 7), (7, 9), (9, 8), (8, 10), (10, 1)], [(5, 7), (7, 9), (9, 10), (10, 6), (6, 1)], [(5, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 2), (2, 8), (8, 6), (6, 1)], [(5, 3), (3, 7), (7, 2), (2, 8), (8, 10), (10, 1)], [(5, 3), (3, 7), (7, 2), (2, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 8), (8, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 10), (10, 1)], [(5, 3), (3, 7), (7, 9), (9, 8), (8, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 8), (8, 10), (10, 1)], [(5, 3), (3, 7), (7, 9), (9, 10), (10, 6), (6, 1)], [(5, 3), (3, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 3), (3, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 3), (3, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 3), (3, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (3, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (3, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 2), (2, 6), (6, 1)], [(5, 4), (3, 7), (7, 2), (2, 8), (8, 1)], [(5, 4), (3, 7), (7, 2), (2, 10), (10, 1)], [(5, 4), (3, 7), (7, 8), (8, 6), (6, 1)], [(5, 4), (3, 7), (7, 8), (8, 10), (10, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 1)], [(5, 4), (3, 7), (7, 9), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 8), (8, 1)], [(5, 4), (3, 7), (7, 9), (9, 10), (10, 1)], [(5, 4), (3, 7), (7, 10), (10, 6), (6, 1)], [(5, 4), (3, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 9), (9, 2), (2, 6), (6, 1)], [(5, 4), (3, 9), (9, 2), (2, 8), (8, 1)], [(5, 4), (3, 9), (9, 2), (2, 10), (10, 1)], [(5, 4), (3, 9), (9, 8), (8, 6), (6, 1)], [(5, 4), (3, 9), (9, 8), (8, 10), (10, 1)], [(5, 4), (3, 9), (9, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (4, 7), (7, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (4, 7), (7, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 8), (8, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 10), (10, 1)], [(5, 4), (4, 7), (7, 9), (9, 8), (8, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 8), (8, 10), (10, 1)], [(5, 4), (4, 7), (7, 9), (9, 10), (10, 6), (6, 1)], [(5, 4), (4, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (4, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (4, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (4, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 7), (7, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 7), (7, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 7), (7, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 7), (7, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (3, 7), (7, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (3, 7), (7, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 8), (8, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 10), (10, 1)], [(5, 4), (3, 7), (7, 9), (9, 8), (8, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 8), (8, 10), (10, 1)], [(5, 4), (3, 7), (7, 9), (9, 10), (10, 6), (6, 1)], [(5, 4), (3, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (3, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (3, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (3, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 3), (3, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 8), (8, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (4, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)], [(5, 4), (3, 7), (7, 9), (9, 2), (2, 8), (8, 10), (10, 6), (6, 1)]]
Pair = (5,1)

MemberCount, Bids = data_parser('../testdata/project.3.dat')


def most_candidate(uncertain_candidates: typing.List[typing.List[typing.Tuple[int, int]]]
                   ) -> typing.List[typing.Tuple[typing.Tuple[int, int], int]]:
    most_candidates = []
    for i in range(10):
        most_count = 0
        most_count_candidate = (0, 0)
        if most_candidates:
            uncertain_candidates = [x for x in uncertain_candidates if most_candidates[-1][0] not in x]
        for candidates in uncertain_candidates:
            for candidate in candidates:

                count = 0
                for _candidates in uncertain_candidates:
                    if candidate in _candidates:
                        count += 1

                # count = [ candidate in _candidates for _candidates in uncertain_candidates ].count(True)
                if count > most_count:
                    most_count = count
                    most_count_candidate = candidate
        if most_count:
            most_candidates.append((most_count_candidate, most_count))
        else:
            break
    return most_candidates

def get_common_items():
    certain_candidates = list()
    uncertain_candidates = list()
    for candidate_group in _candidate_groups:
        if len(candidate_group) == 1:
            if candidate_group[0] not in certain_candidates:
                certain_candidates.append(candidate_group[0])
    for candidate_group in _candidate_groups:
        if not set(candidate_group) & set(certain_candidates):
            uncertain_candidates.append(candidate_group)
    # print(f'uncertain_candidates: {uncertain_candidates}')
    most_candidates = most_candidate(uncertain_candidates)
    print(most_candidates)
    sum_priority = 0
    for candidate in most_candidates:
        sum_priority += Bids[candidate[0][0]][candidate[0][1]] - Bids[candidate[0][1]][candidate[0][0]]
    print(f'sum_priority: {sum_priority}')



def get_candidates_during_local_search(
        increasing_bid: int, cycles: typing.List[typing.List[int]]
) -> (typing.List[typing.Tuple[int, int]], int, typing.List[typing.Tuple[typing.List[int], int]]):
    def inner_loop(
            pairs: typing.List[typing.Tuple[int, int]], decreasing_bid: int,
            candidates: typing.List[typing.List[typing.Tuple[int, int]]]
    ) -> typing.Iterable[typing.Tuple[typing.List[typing.Tuple[int, int]], int]]:
        for candidate in candidates[len(pairs)]:
            added = False
            decreasing_bid_from_k = 0
            if candidate in pairs:
                added = True
            elif Bids[candidate[0]][candidate[1]] - Bids[candidate[1]][candidate[0]] + decreasing_bid < \
                    increasing_bid:
                added = True
                decreasing_bid_from_k = Bids[candidate[0]][candidate[1]] - Bids[candidate[1]][candidate[0]]
            if added:
                if len(pairs) + 1 == len(candidates):
                    yield pairs + [candidate], decreasing_bid + decreasing_bid_from_k
                else:
                    yield from inner_loop(pairs + [candidate], decreasing_bid + decreasing_bid_from_k, candidates)

    candidate_groups = [[] for _ in range(len(cycles))]
    for i in range(len(cycles)):
        for j in range(len(cycles[i]) - 1):
            if Bids[cycles[i][j]][cycles[i][j + 1]] - Bids[cycles[i][j + 1]][
                cycles[i][j]] < increasing_bid and \
                    Bids[cycles[i][j]][cycles[i][j + 1]] >= Bids[cycles[i][j + 1]][cycles[i][j]]:
                candidate_groups[i].append((cycles[i][j], cycles[i][j + 1]))
        if not candidate_groups[i]:
            print(f'no feasible flipped candidates for {cycles[i]}')
            return [], -1, []
    certain_candidates = list()
    certain_candidates_decreasing_bid = 0
    uncertain_candidates = list()
    print('candidate_groups', candidate_groups)
    for candidate_group in candidate_groups:
        if len(candidate_group) == 1:
            if candidate_group[0] not in certain_candidates:
                certain_candidates.append(candidate_group[0])
                certain_candidates_decreasing_bid += Bids[candidate_group[0][0]][candidate_group[0][1]] - \
                                                     Bids[candidate_group[0][1]][candidate_group[0][0]]
    print(f'certain_candidates: {certain_candidates}')
    if certain_candidates_decreasing_bid >= increasing_bid:
        print(
            f'decreased bid is already greater than increasing_bid: {certain_candidates_decreasing_bid} > {increasing_bid}')
        return [], -1, []
    for candidate_group in candidate_groups:
        if not set(candidate_group) & set(certain_candidates):
            uncertain_candidates.append(candidate_group)
    if not uncertain_candidates:
        print('no uncertain candidates')
        return certain_candidates, certain_candidates_decreasing_bid, []
    potential_flipped_candidates = list(inner_loop([], certain_candidates_decreasing_bid, uncertain_candidates))
    print('quit inner loop')
    if not potential_flipped_candidates:
        print(f'no feasible uncertain flipped candidates')
        return [], -1, []
    to_check_candidates = list()
    for candidates, decreasing_bid in potential_flipped_candidates:
        drop = False
        for i in range(len(candidates)):
            for j in range(len(uncertain_candidates)):
                if i != j:
                    if candidates[i] in uncertain_candidates[j] and candidates[j] != candidates[i]:
                        """drop these candidates"""
                        drop = True
                        break
            if drop:
                break
            else:
                to_check_candidates.append((candidates, decreasing_bid))
    return certain_candidates, certain_candidates_decreasing_bid, to_check_candidates


if __name__ == '__main__':
    # get_candidates_during_local_search(7, formed_loops)
    get_common_items()